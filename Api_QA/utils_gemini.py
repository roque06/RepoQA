import streamlit as st
import requests
import certifi
import re
import csv
import io
import csv
import io
import os
import argparse
import streamlit as st
import pandas as pd
import time

# utils_gemini.py
from typing import List, Dict

SYSTEM_PROMPT_ES = """Eres un analista QA senior. A partir del contexto, genera escenarios de prueba s√≥lidos:
- Cubre flujo feliz, errores, bordes y no-funcionales (performance, seguridad, accesibilidad).
- Formato tabla: ID, T√≠tulo, Precondiciones, Pasos, Resultado Esperado, Tipo, Prioridad, Datos de Prueba.
- Referencia evidencia con [SRC:<sha1_8|filename>] cuando corresponda.
- Si falta info, marca ASUMIDO con breve justificaci√≥n.
"""

def _build_prompt(contexto: str, metas: List[Dict]) -> str:
    src = ""
    if metas:
        src = "Fuentes procesadas:\n" + "\n".join(
            f"- {m['filename']} [{m['sha1_8']}] ({m['ext']}, {m['size_bytes']} bytes)" for m in metas
        ) + "\n"
    cuerpo = contexto[:400_000] + ("...\n(truncado)" if len(contexto) > 400_000 else "")
    return f"{SYSTEM_PROMPT_ES}\n{src}\nContexto combinado:\n{cuerpo}"

def generar_escenarios_desde_contexto(contexto_total: str, metas: List[Dict] = None) -> str:
    prompt = _build_prompt(contexto_total, metas or [])
    # TODO: aqu√≠ invocas tu cliente Gemini real (ejemplo):
    # return gemini_client.generate_text(prompt=prompt, model="gemini-1.5-pro")
    return f"[DEBUG] Prompt de {len(prompt)} caracteres enviado a Gemini."





def prompt_generar_escenarios_profesionales(descripcion_refinada):
    return {
        "contents": [
            {
                "parts": [
                    {
                        "text": (
                            "Eres un Analista QA Senior experto en dise√±o de pruebas funcionales para sistemas empresariales.\n\n"
                            "A partir de la siguiente descripci√≥n funcional RECI√âN REFINADA, genera una tabla en formato CSV puro "
                            "con exactamente estas columnas (encabezado incluido):\n"
                            "Title,Preconditions,Steps,Expected Result,Type,Priority\n\n"

                            "‚ö†Ô∏è REGLAS ESTRICTAS DE SALIDA:\n"
                            "- SOLO imprime el CSV. Nada de texto extra, t√≠tulos, explicaciones ni bloques Markdown.\n"
                            "- Usa comas como separador; si una celda contiene comas o saltos de l√≠nea, enci√©rrala entre comillas dobles.\n"
                            "- Steps numerados como: 1. 2. 3. (cada paso en su propia l√≠nea usando \\n dentro de la celda).\n"
                            "- Type ‚àà {Funcional, Validaci√≥n, Seguridad, Usabilidad}.\n"
                            "- Priority ‚àà {Alta, Media, Baja}.\n"
                            "- No establezcas un n√∫mero fijo de casos: genera **todos los escenarios distintos y relevantes** que identifiques.\n"
                            "- Desglosa variaciones por datos/condiciones (p. ej., distintas validaciones de campos, reglas de negocio, estados, "
                            "perfiles/roles, productos/monedas/plazos, l√≠mites m√≠nimos/m√°ximos, flujos con/sin relacionados, consolidaciones, "
                            "y clientes con o sin productos previos), evitando duplicados.\n"
                            "- Si dos escenarios solo difieren en un par√°metro, crea filas separadas y expl√≠citalo en Title/Steps.\n\n"

                            "üéØ INSTRUCCIONES ESPEC√çFICAS PARA **Preconditions** (obligatorio cumplir):\n"
                            "- Deben ser **concretas y accionables**, derivadas de la descripci√≥n. Evita gen√©ricos como "
                            "\"Usuario con sesi√≥n iniciada\" si no est√°n acompa√±ados de supuestos de datos y servicios.\n"
                            "- Cuando la funcionalidad mencione o implique:\n"
                            "  ‚Ä¢ **Identificaci√≥n** (tipo/n√∫mero de documento): incluir 'Cliente registrado en la base de datos con documento vigente'.\n"
                            "  ‚Ä¢ **Producto Tarjeta de Cr√©dito**: incluir 'Cliente con al menos una tarjeta de cr√©dito activa/v√°lida'.\n"
                            "  ‚Ä¢ **Segmento del cliente**: incluir 'Producto habilitado/compatible con el segmento del cliente'.\n"
                            "  ‚Ä¢ **Validaciones/Reglas**: incluir 'Servicios/reglas de negocio y motores de validaci√≥n operativos'.\n"
                            "  ‚Ä¢ **Sesi√≥n**: incluir 'Aplicaci√≥n disponible y sesi√≥n iniciada'.\n"
                            "- Si aplica m√°s de una, **comb√≠nalas** en la precondici√≥n (separadas por '; ').\n"
                            "- Prohibido: 'Ninguna', 'N/A', precondiciones vac√≠as o gen√©ricas sin contexto de datos/servicios.\n\n"

                            "üß™ FEW-SHOT (NO IMPRIMIR EN LA RESPUESTA):\n"
                            "Ejemplo de buena precondici√≥n cuando hay identificaci√≥n + tarjeta + segmento:\n"
                            "  'Aplicaci√≥n disponible y sesi√≥n iniciada; "
                            "Cliente registrado en la base de datos con documento vigente; "
                            "Cliente con al menos una tarjeta de cr√©dito activa; "
                            "La tarjeta est√° habilitada para el segmento del cliente; "
                            "Servicios de validaci√≥n y reglas de negocio operativos'\n\n"

                            "‚úÖ CHECKLIST PRE-SALIDA (interno, NO imprimir):\n"
                            "- Cobertura de flujo feliz, negativos/validaciones, seguridad, usabilidad, casos borde y variaciones de datos.\n"
                            "- Si la descripci√≥n/Steps mencionan identificaci√≥n ‚Üí incluir 'cliente registrado + documento vigente'.\n"
                            "- Si mencionan tarjeta de cr√©dito ‚Üí incluir 'tarjeta activa/v√°lida'.\n"
                            "- Si mencionan segmento ‚Üí incluir 'producto habilitado para el segmento'.\n"
                            "- Si hay 'validar' o reglas ‚Üí incluir 'servicios/reglas operativos'.\n"
                            "- Si hay acciones en la UI ‚Üí incluir 'aplicaci√≥n disponible y sesi√≥n iniciada'.\n"
                            "- Evitar duplicados; t√≠tulos claros que indiquen la variante cubierta.\n\n"

                            "üìÑ Descripci√≥n funcional (refinada):\n"
                            f"{descripcion_refinada}"
                        )
                    }
                ]
            }
        ]
    }








def prompt_sugerencias_mejora(texto_funcional):
    return {
        "contents": [
            {
                "parts": [
                    {
                        "text": (
                            "Act√∫a como Analista QA Senior.\n"
                            "Analiza el siguiente texto funcional y genera entre 5 y 10 sugerencias claras para mejorarlo, "
                            "enfoc√°ndote en facilitar la generaci√≥n de escenarios de prueba automatizados.\n\n"
                            "üéØ Las sugerencias deben centrarse en:\n"
                            "- Claridad y especificidad t√©cnica\n"
                            "- Inclusi√≥n de validaciones de campos\n"
                            "- Casos l√≠mite o alternativos\n"
                            "- Precondiciones expl√≠citas del sistema o del usuario\n"
                            "- Mejorar la redacci√≥n hacia comportamiento verificable\n\n"
                            f"üìÑ Texto funcional:\n{texto_funcional}"
                        )
                    }
                ]
            }
        ]
    }


def generar_sugerencias_con_gemini(texto_funcional):
    prompt = prompt_sugerencias_mejora(texto_funcional)
    respuesta = enviar_a_gemini(prompt)
    texto_sugerencias = extraer_texto_de_respuesta_gemini(respuesta)

    # Separar por l√≠neas o vi√±etas
    sugerencias = [
        linea.strip("‚Ä¢-1234567890. ") for linea in texto_sugerencias.strip().split("\n")
        if len(linea.strip()) > 5
    ]

    return sugerencias



def respuesta_es_valida(respuesta_json: dict) -> bool:
    """
    Verifica si la respuesta de Gemini contiene la estructura esperada.
    """
    return (
        isinstance(respuesta_json, dict)
        and "candidates" in respuesta_json
        and len(respuesta_json["candidates"]) > 0
        and "content" in respuesta_json["candidates"][0]
        and "parts" in respuesta_json["candidates"][0]["content"]
    )



def extraer_texto_de_respuesta_gemini(respuesta_json: dict) -> str:
    """
    Extrae texto plano desde respuesta Gemini JSON.
    Remueve bloques markdown y limpia espacios innecesarios.
    """
    try:
        texto = respuesta_json['candidates'][0]['content']['parts'][0]['text']

        # Quitar bloques Markdown ```csv ```
        if '```csv' in texto:
            texto = texto.split('```csv')[1]
        if '```' in texto:
            texto = texto.split('```')[0]

        # Limpiar l√≠neas vac√≠as y espacios extras
        lineas = [line.strip() for line in texto.strip().splitlines() if line.strip()]
        return "\n".join(lineas)

    except (KeyError, IndexError, TypeError) as e:
        raise ValueError(f"‚ùå No se pudo extraer texto de Gemini: {e}")

def generar_prompt_csv_robusto(texto_funcional):
    prompt = f"""
Act√∫a como un analista de QA experto.

Genera 3 escenarios de prueba funcionales en formato CSV, usando exactamente estas columnas:
Title,Preconditions,Steps,Expected Result,Type,Priority

‚ö†Ô∏è Instrucciones estrictas:
- No expliques nada.
- No uses formato Markdown.
- Usa comas como separadores.
- Cada l√≠nea debe tener contenido realista, t√©cnico y profesional.
- Sin encabezados duplicados. Solo la tabla.

Texto funcional:
\"\"\"{texto_funcional}\"\"\"
    """.strip()
    return prompt


def validar_respuesta_gemini(texto_csv, columnas_esperadas=6):
    lineas = texto_csv.strip().split("\n")
    casos_validos = []

    for i, linea in enumerate(lineas):
        partes = [p.strip() for p in linea.split(",")]
        if len(partes) == columnas_esperadas and all(partes):
            casos_validos.append(linea)

    return casos_validos


def invocar_con_reintento(prompt, max_intentos=3, espera_inicial=2):
    from utils_gemini import llamar_a_gemini
    import time

    for intento in range(1, max_intentos + 1):
        try:
            resultado = llamar_a_gemini(prompt)
            if isinstance(resultado, tuple):
                resultado = resultado[0]
            return resultado
        except ValueError as e:
            if "503" in str(e) and intento < max_intentos:
                time.sleep(espera_inicial * intento)
            else:
                raise



def enviar_a_gemini(prompt_dict, max_intentos=4, espera_inicial=2):

    API_KEY = st.secrets["gemini_api_key"]
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"

    headers = {
        "Content-Type": "application/json",
        "X-goog-api-key": API_KEY
    }

    intentos = 0
    while intentos < max_intentos:
        try:
            response = requests.post(url, headers=headers, json=prompt_dict)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.HTTPError as e:
            if response.status_code == 503:
                # Si es 503, espera un momento y reintenta
                espera = espera_inicial * (intentos + 1)
                st.warning(f"‚ö†Ô∏è Gemini est√° saturado (503). Reintentando en {espera} segundos... (Intento {intentos+1}/{max_intentos})")
                time.sleep(espera)
                intentos += 1
            else:
                # Otros errores HTTP, se lanza inmediatamente
                raise ValueError(f"‚ùå Error HTTP al invocar Gemini: {e}")
        except Exception as e:
            raise ValueError(f"‚ùå Error general al invocar Gemini: {e}")

    # Si fallaron todos los intentos
    raise ValueError("‚ùå Gemini no respondi√≥ tras varios intentos (503 repetidos).")


def prompt_refinar_descripcion(texto_funcional):
    return {
        "contents": [{
            "parts": [{
                "text": (
                    "Eres un analista experto en QA. Debes reestructurar claramente la siguiente descripci√≥n funcional "
                    "en formato t√©cnico y profesional, prepar√°ndola para que luego se generen escenarios de prueba. "
                    "Obligatoriamente incluye estas tres secciones claramente separadas y completas:\n\n"
                    "- M√≥dulo: (Nombre breve del m√≥dulo o componente involucrado)\n"
                    "- Funci√≥n: (Acci√≥n principal que permite esta funcionalidad)\n"
                    "- Detalle t√©cnico del comportamiento esperado: (Breve pero clara descripci√≥n t√©cnica de c√≥mo deber√≠a funcionar exactamente la funcionalidad)\n\n"
                    "üìå Ejemplo claro:\n"
                    "- M√≥dulo: Registro de usuarios\n"
                    "- Funci√≥n: Permitir que usuarios nuevos se registren\n"
                    "- Detalle t√©cnico del comportamiento esperado: El formulario validar√° campos obligatorios como usuario, correo y contrase√±a. Se mostrar√° un mensaje de √©xito al completar correctamente el registro y mensajes espec√≠ficos en caso de error en cualquier validaci√≥n.\n\n"
                    f"‚ö†Ô∏è Ahora reestructura profesionalmente el siguiente texto:\n\n{texto_funcional}"
                )
            }]
        }]
    }

def obtener_descripcion_refinada(texto_funcional, max_intentos=3):
    intentos = 0
    while intentos < max_intentos:
        respuesta_estructurada = enviar_a_gemini(prompt_refinar_descripcion(texto_funcional))
        descripcion_refinada = extraer_texto_de_respuesta_gemini(respuesta_estructurada).strip()

        if descripcion_refinada:
            return descripcion_refinada

        intentos += 1
        time.sleep(1)  # peque√±o retardo antes de reintentar

    # si llega aqu√≠, todos los intentos fallaron

    raise ValueError("‚ö†Ô∏è Gemini no devolvi√≥ descripci√≥n v√°lida tras varios intentos.")

